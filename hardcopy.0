Executing (default): CREATE TABLE IF NOT EXISTS "user_login" ("name" VARCHAR(50)
 , "key" VARCHAR(100) , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedA
t" TIMESTAMP WITH TIME ZONE NOT NULL, "id" UUID REFERENCES "users" ("id") ON DEL
ETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("name","key"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.in
disunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes,
 array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definit
ion FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.in
drelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and
t.relname = 'user_login' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.
indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("userId" UUID ,
"displayName" VARCHAR(100), "picture" VARCHAR(255), "gender" VARCHAR(50), "locat
ion" VARCHAR(100), "website" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE
NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "id" UUID REFERENCES "u
sers" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("userId"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.in
disunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes,
 array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definit
ion FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.in
drelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and
t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, i
x.indisunique, ix.indkey ORDER BY i.relname;

